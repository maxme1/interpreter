program = statement*

statement = (StmtBody? DELIMITER) | block | ifStmt | whileStmt | funcDef | classDef

StmtBody = expression | 'break' | 'continue' | returnStmt
returnStmt = 'return' expression?

# TODO: possibly optional first statement
ifStmt = 'if' '(' expression ')' (statement ('else' statement)? )?
whileStmt = 'while' '(' expression ')' statement
block = '{' statement* '}'

funcDef = 'def' IDENTIFIER '(' argsList? ')' block
argsList = IDENTIFIER (SEPARATOR IDENTIFIER)*

classDef = 'class' IDENTIFIER block

-- expression --

expression = comparison | assignment

assignment = assignable '=' expression
assignable = ( primary attribute ) | IDENTIFIER

comparison = term (( '==' | '>=' | '<=' | '<' | '>' | '!=' ) term )*
term = factor ( ('+' | '-') factor )*
factor = unary ( ('*' | '/') unary )*
# TODO: maybe add unlimited unary operations
unary = ('+' | '-')? primary

primary = literal suffix*
literal = NUMBER | '(' expression ')' | IDENTIFIER | BOOL | NONE

suffix = ( '(' call? ')' ) | attribute
call = expression (SEPARATOR expression)*
attribute = '.' IDENTIFIER

-- literals --

NUMBER = '\d+'
IDENTIFIER = '[^a-zA-Z_]\w*'
BOOL = 'True' | 'False'
NONE = 'None'
DELIMITER = ';'
SEPARATOR = ','