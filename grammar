program = statement*

statement = (StmtBody? DELIMITER) | block | ifStmt | whileStmt | tryStmt | funcDef | classDef | varDef

StmtBody = expression | 'break' | 'continue' | returnStmt | raiseStmt | importStmt
returnStmt = 'return' expression?
raiseStmt = 'raise' expression?

importStmt = 'import' IDENTIFIER
tryStmt = 'try' block ('catch' '(' argsValues ')' block)*
ifStmt = 'if' '(' expression ')' (statement ('else' statement)? )?
whileStmt = 'while' '(' expression ')' statement
block = '{' statement* '}'

funcDef = 'def' IDENTIFIER '(' argsList? (SEPARATOR if argsList) kwargs? ')' block
argsList = IDENTIFIER (SEPARATOR IDENTIFIER)*
kwargs = kwarg (SEPARATOR kwarg)*
kwarg = IDENTIFIER = expression

classDef = 'class' IDENTIFIER superclass? block
superclass = '(' expression? ')'

varDef = 'var' IDENTIFIER ('=' expression)?

-- expression --

expression = comparison | assignment

assignment = assignable | IDENTIFIER '=' expression
assignable = primary attribute | item

comparison = term (( '==' | '>=' | '<=' | '<' | '>' | '!=' ) term )*
term = factor ( ('+' | '-') factor )*
factor = unary ( ('*' | '/') unary )*
# TODO: maybe add unlimited unary operations
unary = ('+' | '-')? primary

primary = literal suffix*
literal = NUMBER | '(' expression ')' | IDENTIFIER | BOOL | NONE | STRING | superAttr
superAttr = 'super' '.' IDENTIFIER

suffix = call | attribute | item
attribute = '.' IDENTIFIER
item = '[' expression ']'
call = '(' positional? (SEPARATOR if positional) kwargs? ')'
positional = expression (SEPARATOR expression)*

-- base definitions --

NUMBER = '\d+'
STRING = "'[^']*'"
BOOL = 'True' | 'False'
NONE = 'None'
IDENTIFIER = '[a-zA-Z_]\w*'
DELIMITER = ';'
SEPARATOR = ','
COMMENT = '#[^\n]*'